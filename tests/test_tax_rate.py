from src.tax_rate import TaxRateimport unittest,os,config.settingsclass TestTaxRate(unittest.TestCase):    """        docstring for TestTaxRate    """    def setUp(self):        tax_rate_file_path = os.path.join(            settings.TAX_RATE_BACKUP_PATH,            settings.TAX_RATE_DEFAULT_FILENAME        )        self.instance = TaxRate(tax_rate_file_path)        print self.instance.__get_taxrate_local_json__()    def test_getting_tax_rate(self):        """prove if tax rate details can be returned"""        self.assertEqual(            self.instance.get_taxrate(),                [                    {   u'financial_year': u'2016-17',                        u'brackets': [                            {u'rate': 0.0, u'low_end': 0.0},                            {u'rate': 0.19, u'low_end': 18201.0},                            {u'rate': 0.325, u'low_end': 37001.0},                            {u'rate': 0.37, u'low_end': 87001.0},                            {u'rate': 0.45, u'low_end': 180001.0}]},                    {                        u'financial_year': u'2015-16',                        u'brackets': [{u'rate': 0.0, u'low_end': 0.0},                        {u'rate': 0.19, u'low_end': 18201.0},                        {u'rate': 0.325, u'low_end': 37001.0},                        {u'rate': 0.37, u'low_end': 80001.0},                        {u'rate': 0.45, u'low_end': 180001.0}]                    }                ]            )    def test_get_taxrate_local_json__(self):        self.assertEqual(            self.instance.__get_taxrate_local_json__(),                [                    {   u'financial_year': u'2016-17',                        u'brackets': [                            {u'rate': 0.0, u'low_end': 0.0},                            {u'rate': 0.19, u'low_end': 18201.0},                            {u'rate': 0.325, u'low_end': 37001.0},                            {u'rate': 0.37, u'low_end': 87001.0},                            {u'rate': 0.45, u'low_end': 180001.0}]},                    {                        u'financial_year': u'2015-16',                        u'brackets': [{u'rate': 0.0, u'low_end': 0.0},                        {u'rate': 0.19, u'low_end': 18201.0},                        {u'rate': 0.325, u'low_end': 37001.0},                        {u'rate': 0.37, u'low_end': 80001.0},                        {u'rate': 0.45, u'low_end': 180001.0}]                    }                ]            )    def test_calculate_tax(self):        self.assertEqual(            self.instance.calculate_tax(18200), 0            )        self.assertEqual(            self.instance.calculate_tax(36999), 3572            )        self.assertEqual(            self.instance.calculate_tax(79999), 17546            )        self.assertEqual(            self.instance.calculate_tax(179999), 54546            )